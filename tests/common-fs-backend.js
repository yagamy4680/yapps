// Generated by LiveScript 1.5.0
(function(){
  var fs, path, mkdirp, ref$, DBG, ERR, WARN, INFO, lodash_padStart, ROOT_DIR, REGEXP_JSON, REGEXP_JSON_GZ, COMPOSE_FILEPATH, DECOMPOSE_FILEPATH, init, check, write, read, remove, list, exports;
  fs = require('fs');
  path = require('path');
  mkdirp = require('mkdirp');
  ref$ = global.getLogger(__filename), DBG = ref$.DBG, ERR = ref$.ERR, WARN = ref$.WARN, INFO = ref$.INFO;
  lodash_padStart = require('lodash/padStart');
  ROOT_DIR = "/tmp/queues";
  REGEXP_JSON = /[0-9]{4}\-[0-9A-F]{10}\-[0-9]{13}\.json/;
  REGEXP_JSON_GZ = /[0-9]{4}\-[0-9A-F]{10}\-[0-9]{13}\.json.gz/;
  COMPOSE_FILEPATH = function(name, format, timestamp){
    var boots, uptime, epoch, rootdir, bs, up;
    boots = timestamp.boots, uptime = timestamp.uptime, epoch = timestamp.epoch;
    rootdir = module.rootdir;
    bs = lodash_padStart(boots.toString(), 5, '0');
    up = lodash_padStart(uptime.toString(16).toUpperCase(), 10, '0');
    return rootdir + "" + path.sep + bs + "-" + up + "-" + epoch + "." + format;
  };
  DECOMPOSE_FILEPATH = function(p, format){
    var name, tokens, ref$, boots, uptime, epoch;
    name = path.basename(p, "." + format);
    ref$ = tokens = name.split('-'), boots = ref$[0], uptime = ref$[1], epoch = ref$[2];
    boots = parseInt(boots);
    uptime = parseInt(uptime, 16);
    epoch = parseInt(epoch);
    return {
      boots: boots,
      uptime: uptime,
      epoch: epoch
    };
  };
  init = function(name, format, done){
    var r;
    module.rootdir = r = ROOT_DIR + "/" + name;
    INFO("initialize " + r + " ...");
    return mkdirp(r, done);
  };
  check = function(name, format, timestamp){
    return done();
  };
  write = function(name, format, timestamp, buffer, done){
    var f;
    buffer == null && (buffer = null);
    done == null && (done = null);
    if (!(buffer != null && done != null)) {
      return COMPOSE_FILEPATH(name, format, timestamp);
    }
    f = function(){
      return fs.writeFile(COMPOSE_FILEPATH(name, format, timestamp), buffer, done);
    };
    return setTimeout(f, 3000);
  };
  read = function(name, format, timestamp, done){
    return fs.readFile(COMPOSE_FILEPATH(name, format, timestamp), done);
  };
  remove = function(name, format, timestamp, done){
    return fs.unlink(COMPOSE_FILEPATH(name, format, timestamp), done);
  };
  list = function(name, format, done){
    var rootdir, REGEXP;
    rootdir = module.rootdir;
    REGEXP = format === 'json' ? REGEXP_JSON : REGEXP_JSON_GZ;
    return fs.readdir(rootdir, function(err, files){
      var xs, res$, i$, len$, f;
      if (err != null) {
        return done(err);
      }
      INFO("files => " + JSON.stringify(files));
      res$ = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        f = files[i$];
        if (REGEXP.test(f)) {
          res$.push(DECOMPOSE_FILEPATH(f, format));
        }
      }
      xs = res$;
      return done(null, xs);
    });
  };
  module.exports = exports = {
    init: init,
    check: check,
    write: write,
    read: read,
    remove: remove,
    list: list
  };
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95YWdhbXkvV29ya3Mvd29ya3NwYWNlcy90MnQveWFwcHMtdHQvZXh0ZXJuYWxzL3lfbW9kdWxlcy95YXBwcy90ZXN0cy9jb21tb24tZnMtYmFja2VuZC5scyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFBUyxFQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBO0VBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsTUFBQTtFQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFFBQUE7RUFDVCxJQUFBLEdBQXlCLE1BQU0sQ0FBQyxTQUFoQyxDQUEyQyxVQUFBLENBQTNDLEVBQUMsR0FBc0IsQ0FBQSxDQUFBLENBQXZCLElBQUEsQ0FBQyxHQUFELEVBQU0sR0FBaUIsQ0FBQSxDQUFBLENBQXZCLElBQUEsQ0FBTSxHQUFOLEVBQVcsSUFBWSxDQUFBLENBQUEsQ0FBdkIsSUFBQSxDQUFXLElBQVgsRUFBaUIsSUFBTSxDQUFBLENBQUEsQ0FBdkIsSUFBQSxDQUFpQjtFQUNqQixlQUFnQixDQUFBLENBQUEsQ0FBRSxRQUFRLGlCQUFBO0VBRXBCLFFBQVMsQ0FBQSxDQUFBLENBQWU7RUFFeEIsV0FBWSxDQUFBLENBQUEsQ0FBRTtFQUNkLGNBQWUsQ0FBQSxDQUFBLENBQUU7RUFHdkIsZ0JBQWlCLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUE7O0lBQ2hCLEtBQXNCLENBQUEsQ0FBQSxDQUFFLFNBQXpCLENBQUMsS0FBRCxFQUFRLE1BQWUsQ0FBQSxDQUFBLENBQUUsU0FBekIsQ0FBUSxNQUFSLEVBQWdCLEtBQU8sQ0FBQSxDQUFBLENBQUUsU0FBekIsQ0FBZ0I7SUFDZixPQUFTLENBQUEsQ0FBQSxDQUFFLE1BQVosQ0FBQztJQUNELEVBQUcsQ0FBQSxDQUFBLENBQUUsZ0JBQWlCLEtBQUssQ0FBQyxTQUFRLEdBQUksR0FBRyxHQUF0QjtJQUNyQixFQUFHLENBQUEsQ0FB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QUFFLFFBQUEsQ0FBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxJQUFBO0lBQ1AsTUFBQSxDQUFPLEVBQUUsQ0FBQyxNQUFWLENBQWtCLGdCQUFsQixDQUFtQyxJQUFuQyxFQUF5QyxNQUF6QyxFQUFpRCxTQUFkLENBQW5DLEVBQTZELElBQTVDLENBQWpCOztFQUVGLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQTs7SUFDSixPQUFTLENBQUEsQ0FBQSxDQUFFLE1BQVosQ0FBQztJQUNELE1BQU8sQ0FBQSxDQUFBLENBQUssTUFBTyxDQUFBLEdBQUEsQ0FBRyxPQUFNLEVBQUssWUFBWSxFQUFLO1dBQ2xDLEVBQUUsQ0FBQyxRQUFROztNQUNYLElBQUcsR0FBQSxRQUFIO1FBQWhCLE1BQUEsQ0FBTyxJQUFQLENBQVksR0FBQSxDQUFaOztNQUNBLEtBQUssV0FBQSxDQUFBLENBQUEsQ0FBWSxJQUFJLENBQUMsU0FBakIsQ0FBMkIsS0FBQSxDQUFoQzs7TUFDSyxpREFBQTtRQUFxQztZQUFnQixNQUFNLENBQUMsS0FBSyxDQUFBO29CQUE5RCxtQkFBbUIsR0FBRyxNQUFIOzs7TUFBM0IsRUFBRyxDQUFBLENBQUE7TUFDSCxNQUFBLENBQU8sSUFBUCxDQUFZLElBQVosRUFBa0IsRUFBTixDQUFaO0tBSjJCOztFQU03QixNQUFNLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBRSxPQUFRLENBQUEsQ0FBQSxDQUFFO0lBQUMsTUFBQTtJQUFNLE9BQUE7SUFBTyxPQUFBO0lBQU8sTUFBQTtJQUFNLFFBQUE7SUFBUSxNQUFBO0VBQW5DIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSEgPFtmcyBwYXRoIG1rZGlycF0+XG57REJHLCBFUlIsIFdBUk4sIElORk99ID0gZ2xvYmFsLmdldC1sb2dnZXIgX19maWxlbmFtZVxubG9kYXNoX3BhZFN0YXJ0ID0gcmVxdWlyZSBcXGxvZGFzaC9wYWRTdGFydFxuXG5jb25zdCBST09UX0RJUiA9IFwiL3RtcC9xdWV1ZXNcIlxuXG5jb25zdCBSRUdFWFBfSlNPTiA9IC9bMC05XXs0fVxcLVswLTlBLUZdezEwfVxcLVswLTldezEzfVxcLmpzb24vXG5jb25zdCBSRUdFWFBfSlNPTl9HWiA9IC9bMC05XXs0fVxcLVswLTlBLUZdezEwfVxcLVswLTldezEzfVxcLmpzb24uZ3ovXG5cblxuQ09NUE9TRV9GSUxFUEFUSCA9IChuYW1lLCBmb3JtYXQsIHRpbWVzdGFtcCkgLT5cbiAge2Jvb3RzLCB1cHRpbWUsIGVwb2NofSA9IHRpbWVzdGFtcFxuICB7cm9vdGRpcn0gPSBtb2R1bGVcbiAgYnMgPSBsb2Rhc2hfcGFkU3RhcnQgKGJvb3RzLnRvU3RyaW5nISksIDUsICcwJ1xuICB1cCA9IGxvZGFzaF9wYWRTdGFydCAodXB0aW1lLnRvU3RyaW5nIDE2IC50by11cHBlci1jYXNlISksIDEwLCAnMCdcbiAgIyByZXR1cm4gXCIje3Jvb3RkaXJ9I3twYXRoLnNlcH0je2Jvb3RzfS0je3VwdGltZX0tI3tlcG9jaH0uI3tmb3JtYXR9XCJcbiAgcmV0dXJuIFwiI3tyb290ZGlyfSN7cGF0aC5zZXB9I3tic30tI3t1cH0tI3tlcG9jaH0uI3tmb3JtYXR9XCJcblxuREVDT01QT1NFX0ZJTEVQQVRIID0gKHAsIGZvcm1hdCkgLT5cbiAgbmFtZSA9IHBhdGguYmFzZW5hbWUgcCwgXCIuI3tmb3JtYXR9XCJcbiAgW2Jvb3RzLCB1cHRpbWUsIGVwb2NoXSA9IHRva2VucyA9IG5hbWUuc3BsaXQgJy0nXG4gIGJvb3RzID0gcGFyc2UtaW50IGJvb3RzXG4gIHVwdGltZSA9IHBhcnNlLWludCB1cHRpbWUsIDE2XG4gIGVwb2NoID0gcGFyc2UtaW50IGVwb2NoXG4gICMgdG9rZW5zID0gWyAocGFyc2UtaW50IHgpIGZvciB4IGluIHRva2VucyBdXG4gICMgW2Jvb3RzLCB1cHRpbWUsIGVwb2NoXSA9IHRva2Vuc1xuICByZXR1cm4ge2Jvb3RzLCB1cHRpbWUsIGVwb2NofVxuXG5cbmluaXQgPSAobmFtZSwgZm9ybWF0LCBkb25lKSAtPlxuICBtb2R1bGUucm9vdGRpciA9IHIgPSBcIiN7Uk9PVF9ESVJ9LyN7bmFtZX1cIlxuICBJTkZPIFwiaW5pdGlhbGl6ZSAje3J9IC4uLlwiXG4gIHJldHVybiBta2RpcnAgciwgZG9uZVxuXG5jaGVjayA9IChuYW1lLCBmb3JtYXQsIHRpbWVzdGFtcCkgLT5cbiAgcmV0dXJuIGRvbmUhXG5cbndyaXRlID0gKG5hbWUsIGZvcm1hdCwgdGltZXN0YW1wLCBidWZmZXI9bnVsbCwgZG9uZT1udWxsKSAtPlxuICAjIHJldHVybiBwYXRoLmJhc2VuYW1lIChDT01QT1NFX0ZJTEVQQVRIIG5hbWUsIGZvcm1hdCwgdGltZXN0YW1wKSwgXCIuI3tmb3JtYXR9XCIgdW5sZXNzIGJ1ZmZlcj8gYW5kIGRvbmU/XG4gIHJldHVybiBDT01QT1NFX0ZJTEVQQVRIIG5hbWUsIGZvcm1hdCwgdGltZXN0YW1wIHVubGVzcyBidWZmZXI/IGFuZCBkb25lP1xuICBmID0gLT4gcmV0dXJuIGZzLndyaXRlRmlsZSAoQ09NUE9TRV9GSUxFUEFUSCBuYW1lLCBmb3JtYXQsIHRpbWVzdGFtcCksIGJ1ZmZlciwgZG9uZVxuICBzZXRUaW1lb3V0IGYsIDMwMDBtc1xuXG5yZWFkID0gKG5hbWUsIGZvcm1hdCwgdGltZXN0YW1wLCBkb25lKSAtPlxuICByZXR1cm4gZnMucmVhZEZpbGUgKENPTVBPU0VfRklMRVBBVEggbmFtZSwgZm9ybWF0LCB0aW1lc3RhbXApLCBkb25lXG5cbnJlbW92ZSA9IChuYW1lLCBmb3JtYXQsIHRpbWVzdGFtcCwgZG9uZSkgLT5cbiAgcmV0dXJuIGZzLnVubGluayAoQ09NUE9TRV9GSUxFUEFUSCBuYW1lLCBmb3JtYXQsIHRpbWVzdGFtcCksIGRvbmVcblxubGlzdCA9IChuYW1lLCBmb3JtYXQsIGRvbmUpIC0+XG4gIHtyb290ZGlyfSA9IG1vZHVsZVxuICBSRUdFWFAgPSBpZiBmb3JtYXQgaXMgXFxqc29uIHRoZW4gUkVHRVhQX0pTT04gZWxzZSBSRUdFWFBfSlNPTl9HWlxuICAoZXJyLCBmaWxlcykgPC0gZnMucmVhZGRpciByb290ZGlyXG4gIHJldHVybiBkb25lIGVyciBpZiBlcnI/XG4gIElORk8gXCJmaWxlcyA9PiAje0pTT04uc3RyaW5naWZ5IGZpbGVzfVwiXG4gIHhzID0gWyAoREVDT01QT1NFX0ZJTEVQQVRIIGYsIGZvcm1hdCkgZm9yIGYgaW4gZmlsZXMgd2hlbiBSRUdFWFAudGVzdCBmIF1cbiAgcmV0dXJuIGRvbmUgbnVsbCwgeHNcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0ge2luaXQsIGNoZWNrLCB3cml0ZSwgcmVhZCwgcmVtb3ZlLCBsaXN0fSJdfQ==
