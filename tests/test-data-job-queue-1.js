// Generated by LiveScript 1.5.0
(function(){
  var moment, colors, SystemUptime, DataJobQueue, backend, ref$, DBG, ERR, WARN, INFO, SERIALIZER, DESERIALIZER, CONSUMER, PRODUCER, OKAY, uptime, q_opts, q;
  moment = require('moment');
  colors = require('colors');
  require('../../yap-simple-logger/lib/yap-simple-logger.ls').init(__filename, __filename, moment, colors);
  global.getBundledModules = function(){
    var lodash_merge, lodash_sortBy, lodash_findIndex, lodash_padEnd, lodash_padStart, async;
    lodash_merge = require('lodash/merge');
    lodash_sortBy = require('lodash/sortBy');
    lodash_findIndex = require('lodash/findIndex');
    lodash_padEnd = require('lodash/padEnd');
    lodash_padStart = require('lodash/padStart');
    async = require('async');
    return {
      async: async,
      lodash_merge: lodash_merge,
      lodash_sortBy: lodash_sortBy,
      lodash_findIndex: lodash_findIndex,
      lodash_padStart: lodash_padStart,
      lodash_padEnd: lodash_padEnd
    };
  };
  SystemUptime = require('../lib/helpers/system-uptime');
  DataJobQueue = require('../lib/helpers/data-job-queue');
  backend = require('./common-fs-backend');
  ref$ = global.getLogger(__filename), DBG = ref$.DBG, ERR = ref$.ERR, WARN = ref$.WARN, INFO = ref$.INFO;
  SERIALIZER = function(data, done){
    var text, error;
    try {
      text = JSON.stringify(data);
    } catch (e$) {
      error = e$;
      return done(error);
    }
    return done(null, new Buffer(text));
  };
  DESERIALIZER = function(buffer, done){
    var text, json, error;
    try {
      text = buffer.toString();
      json = JSON.parse(text);
    } catch (e$) {
      error = e$;
      return done(error);
    }
    return done(null, json);
  };
  CONSUMER = function(name, format, timestamp, data, retries, done){
    var boots, uptime, epoch, len, f;
    boots = timestamp.boots, uptime = timestamp.uptime, epoch = timestamp.epoch;
    len = Buffer.isBuffer(data) || 'string' === typeof data
      ? data.length
      : JSON.stringify(data).length;
    INFO("consuming " + boots + "-" + uptime + "-" + epoch + "." + format + ", with " + len + " bytes.");
    if (!module.okay) {
      return done("remote server is not ready");
    }
    f = function(){
      return done();
    };
    return setTimeout(f, 3000);
  };
  PRODUCER = function(){
    var cpu, mem, env, data;
    cpu = process.cpuUsage();
    mem = process.memoryUsage();
    env = process.env;
    data = {
      cpu: cpu,
      mem: mem,
      env: env
    };
    INFO("inserting " + JSON.stringify(cpu) + ", " + JSON.stringify(mem));
    return q.enqueue(data);
  };
  OKAY = function(){
    return module.okay = true;
  };
  module.okay = false;
  uptime = new SystemUptime({});
  q_opts = {
    verbose: true,
    job: {
      data_format: 'json',
      serializer: SERIALIZER,
      deserializer: DESERIALIZER
    },
    intervals: {
      check: 500,
      consume: 1500,
      store: 3000
    },
    consumer: CONSUMER,
    backend: backend
  };
  q = global.q = new DataJobQueue('abc', uptime, q_opts);
  uptime.init(function(uptimeInitErr){
    if (uptimeInitErr != null) {
      return ERR("failed to initialize system-uptime, err: " + uptimeInitErr);
    }
    return q.init(function(initErr){
      if (initErr != null) {
        ERR("failed to initialize queue, err: " + initErr);
      }
      setInterval(PRODUCER, 1000);
      return setTimeout(OKAY, 8 * 1000);
    });
  });
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95YWdhbXkvV29ya3Mvd29ya3NwYWNlcy90MnQveWFwcHMtdHQvZXh0ZXJuYWxzL3lfbW9kdWxlcy95YXBwcy90ZXN0cy90ZXN0LWRhdGEtam9iLXF1ZXVlLTEubHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0VBRVMsTUFBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQTtFQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsT0FBQSxDQUFBLFFBQUE7RUFDVCxRQUFRLGtEQUFBLENBQWtELENBQUMsS0FBSyxZQUFZLFlBQVksUUFBUSxNQUFoQztFQUVoRSxNQUFNLENBQUMsaUJBQW9CLENBQUEsQ0FBQSxDQUFFLFFBQUEsQ0FBQTs7SUFDM0IsWUFBYSxDQUFBLENBQUEsQ0FBRSxRQUFRLGNBQUE7SUFDdkIsYUFBYyxDQUFBLENBQUEsQ0FBRSxRQUFRLGVBQUE7SUFDeEIsZ0JBQWlCLENBQUEsQ0FBQSxDQUFFLFFBQVEsa0JBQUE7SUFDM0IsYUFBYyxDQUFBLENBQUEsQ0FBRSxRQUFRLGVBQUE7SUFDeEIsZUFBZ0IsQ0FBQSxDQUFBLENBQUUsUUFBUSxpQkFBQTtJQUMxQixLQUFNLENBQUEsQ0FBQSxDQUFFLFFBQVEsT0FBQTtJQUNoQixNQUFBLENBQU8sQ0FBUDtBQUFBLE1BQVEsS0FBUixFQUFRLEtBQVIsQ0FBQTtBQUFBLE1BQWUsWUFBZixFQUFlLFlBQWYsQ0FBQTtBQUFBLE1BQTZCLGFBQTdCLEVBQTZCLGFBQTdCLENBQUE7QUFBQSxNQUE0QyxnQkFBNUMsRUFBNEMsZ0JBQTVDLENBQUE7QUFBQSxNQUE4RCxlQUE5RCxFQUE4RCxlQUE5RCxDQUFBO0FBQUEsTUFBK0UsYUFBL0UsRUFBK0UsYUFBL0U7QUFBQSxJQUFPLENBQVA7O0VBRUYsWUFBYSxDQUFBLENBQUEsQ0FBRSxRQUFRLDhCQUFBO0VBQ3ZCLFlBQWEsQ0FBQSxDQUFBLENBQUUsUUFBUSwrQkFBQTtFQUN2QixPQUFRLENBQUEsQ0FBQSxDQUFFLFFBQVEscUJBQUE7RUFF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RUYsSUFBSyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUE7V0FDTCxNQUFNLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBRTs7RUFHaEIsTUFBTSxDQUFDLElBQUssQ0FBQSxDQUFBLENBQUU7RUFDZCxNQUFPLENBQUEsQ0FBQSxLQUFNLGFBQWEsRUFBQTtFQUMxQixNQUFPLENBQUEsQ0FBQSxDQUNMO0lBQUEsU0FBUztJQUNULEtBQ0U7TUFBQSxhQUFhO01BQ2IsWUFBWTtNQUNaLGNBQWM7SUFGZDtJQUdGLFdBQ0U7TUFBQSxPQUFPO01BQ1AsU0FBUztNQUNULE9BQU87SUFGUDtJQUdGLFVBQVU7SUFDVixTQUFTO0VBVlQ7RUFZRixDQUFFLENBQUEsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxDQUFFLENBQUEsQ0FBQSxLQUFNLGFBQWEsT0FBTSxRQUFRLE1BQWQ7RUFDWCxNQUFNLENBQUM7SUFDNkMsSUFBRyxhQUFBLFFBQUg7TUFBekUsTUFBQSxDQUFPLEdBQVAsQ0FBVywyQ0FBQSxDQUFBLENBQUEsQ0FBNEMsYUFBaEQsQ0FBUDs7V0FDYyxDQUFDLENBQUM7TUFDbUMsSUFBRyxPQUFBLFFBQUg7UUFBbkQsSUFBSSxtQ0FBQSxDQUFBLENBQUEsQ0FBb0MsT0FBeEM7O01BQ0EsWUFBWSxVQUFVLElBQVY7YUFDWixXQUFXLE1BQU0sQ0FBRyxDQUFBLENBQUEsQ0FBRSxJQUFYIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbHNjXG4jXG5yZXF1aXJlISA8W21vbWVudCBjb2xvcnNdPlxucmVxdWlyZSBcXC4uLy4uL3lhcC1zaW1wbGUtbG9nZ2VyL2xpYi95YXAtc2ltcGxlLWxvZ2dlci5scyAuaW5pdCBfX2ZpbGVuYW1lLCBfX2ZpbGVuYW1lLCBtb21lbnQsIGNvbG9yc1xuXG5nbG9iYWwuZ2V0LWJ1bmRsZWQtbW9kdWxlcyA9IC0+XG4gIGxvZGFzaF9tZXJnZSA9IHJlcXVpcmUgXFxsb2Rhc2gvbWVyZ2VcbiAgbG9kYXNoX3NvcnRCeSA9IHJlcXVpcmUgXFxsb2Rhc2gvc29ydEJ5XG4gIGxvZGFzaF9maW5kSW5kZXggPSByZXF1aXJlIFxcbG9kYXNoL2ZpbmRJbmRleFxuICBsb2Rhc2hfcGFkRW5kID0gcmVxdWlyZSBcXGxvZGFzaC9wYWRFbmRcbiAgbG9kYXNoX3BhZFN0YXJ0ID0gcmVxdWlyZSBcXGxvZGFzaC9wYWRTdGFydFxuICBhc3luYyA9IHJlcXVpcmUgXFxhc3luY1xuICByZXR1cm4ge2FzeW5jLCBsb2Rhc2hfbWVyZ2UsIGxvZGFzaF9zb3J0QnksIGxvZGFzaF9maW5kSW5kZXgsIGxvZGFzaF9wYWRTdGFydCwgbG9kYXNoX3BhZEVuZH1cblxuU3lzdGVtVXB0aW1lID0gcmVxdWlyZSBcXC4uL2xpYi9oZWxwZXJzL3N5c3RlbS11cHRpbWVcbkRhdGFKb2JRdWV1ZSA9IHJlcXVpcmUgXFwuLi9saWIvaGVscGVycy9kYXRhLWpvYi1xdWV1ZVxuYmFja2VuZCA9IHJlcXVpcmUgXFwuL2NvbW1vbi1mcy1iYWNrZW5kXG5cbntEQkcsIEVSUiwgV0FSTiwgSU5GT30gPSBnbG9iYWwuZ2V0LWxvZ2dlciBfX2ZpbGVuYW1lXG5cblNFUklBTElaRVIgPSAoZGF0YSwgZG9uZSkgLT5cbiAgdHJ5XG4gICAgdGV4dCA9IEpTT04uc3RyaW5naWZ5IGRhdGFcbiAgY2F0Y2ggZXJyb3JcbiAgICByZXR1cm4gZG9uZSBlcnJvclxuICByZXR1cm4gZG9uZSBudWxsLCBuZXcgQnVmZmVyIHRleHRcblxuREVTRVJJQUxJWkVSID0gKGJ1ZmZlciwgZG9uZSkgLT5cbiAgdHJ5XG4gICAgdGV4dCA9IGJ1ZmZlci50b1N0cmluZyFcbiAgICBqc29uID0gSlNPTi5wYXJzZSB0ZXh0XG4gIGNhdGNoIGVycm9yXG4gICAgcmV0dXJuIGRvbmUgZXJyb3JcbiAgcmV0dXJuIGRvbmUgbnVsbCwganNvblxuXG5DT05TVU1FUiA9IChuYW1lLCBmb3JtYXQsIHRpbWVzdGFtcCwgZGF0YSwgcmV0cmllcywgZG9uZSkgLT5cbiAge2Jvb3RzLCB1cHRpbWUsIGVwb2NofSA9IHRpbWVzdGFtcFxuICBsZW4gPSBpZiBCdWZmZXIuaXNCdWZmZXIgZGF0YSBvciBcXHN0cmluZyBpcyB0eXBlb2YgZGF0YSB0aGVuIGRhdGEubGVuZ3RoIGVsc2UgKEpTT04uc3RyaW5naWZ5IGRhdGEpLmxlbmd0aFxuICBJTkZPIFwiY29uc3VtaW5nICN7Ym9vdHN9LSN7dXB0aW1lfS0je2Vwb2NofS4je2Zvcm1hdH0sIHdpdGggI3tsZW59IGJ5dGVzLlwiXG4gIHJldHVybiBkb25lIFwicmVtb3RlIHNlcnZlciBpcyBub3QgcmVhZHlcIiB1bmxlc3MgbW9kdWxlLm9rYXlcbiAgZiA9IC0+IHJldHVybiBkb25lIVxuICBzZXRUaW1lb3V0IGYsIDMwMDBtc1xuICAjIHJldHVybiBkb25lIVxuXG5cblBST0RVQ0VSID0gLT5cbiAgY3B1ID0gcHJvY2Vzcy5jcHVVc2FnZSFcbiAgbWVtID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSFcbiAgZW52ID0gcHJvY2Vzcy5lbnZcbiAgZGF0YSA9IHtjcHUsIG1lbSwgZW52fVxuICBJTkZPIFwiaW5zZXJ0aW5nICN7SlNPTi5zdHJpbmdpZnkgY3B1fSwgI3tKU09OLnN0cmluZ2lmeSBtZW19XCJcbiAgcmV0dXJuIHEuZW5xdWV1ZSBkYXRhXG5cbk9LQVkgPSAtPlxuICBtb2R1bGUub2theSA9IHllc1xuXG5cbm1vZHVsZS5va2F5ID0gbm9cbnVwdGltZSA9IG5ldyBTeXN0ZW1VcHRpbWUge31cbnFfb3B0cyA9XG4gIHZlcmJvc2U6IHllc1xuICBqb2I6XG4gICAgZGF0YV9mb3JtYXQ6IFxcanNvblxuICAgIHNlcmlhbGl6ZXI6IFNFUklBTElaRVJcbiAgICBkZXNlcmlhbGl6ZXI6IERFU0VSSUFMSVpFUlxuICBpbnRlcnZhbHM6XG4gICAgY2hlY2s6IDUwMG1zXG4gICAgY29uc3VtZTogMTUwMG1zXG4gICAgc3RvcmU6IDMwMDBtc1xuICBjb25zdW1lcjogQ09OU1VNRVJcbiAgYmFja2VuZDogYmFja2VuZFxuXG5xID0gZ2xvYmFsLnEgPSBuZXcgRGF0YUpvYlF1ZXVlIFxcYWJjLCB1cHRpbWUsIHFfb3B0c1xuKHVwdGltZS1pbml0LWVycikgPC0gdXB0aW1lLmluaXRcbnJldHVybiBFUlIgXCJmYWlsZWQgdG8gaW5pdGlhbGl6ZSBzeXN0ZW0tdXB0aW1lLCBlcnI6ICN7dXB0aW1lLWluaXQtZXJyfVwiIGlmIHVwdGltZS1pbml0LWVycj9cbihpbml0LWVycikgPC0gcS5pbml0XG5FUlIgXCJmYWlsZWQgdG8gaW5pdGlhbGl6ZSBxdWV1ZSwgZXJyOiAje2luaXQtZXJyfVwiIGlmIGluaXQtZXJyP1xuc2V0SW50ZXJ2YWwgUFJPRFVDRVIsIDEwMDBtc1xuc2V0VGltZW91dCBPS0FZLCA4cyAqIDEwMDBtcyJdfQ==
